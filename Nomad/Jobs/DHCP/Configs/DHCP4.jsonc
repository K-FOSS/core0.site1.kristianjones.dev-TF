// This is an example configuration file for DHCPv4 server in Kea.
// It demonstrates an advanced feature called shared network. Typically, for
// each physical link there is one IPv4 subnet that the server is expected
// to manage. However, in some cases there is a need to configure more subnets
// in the same physical location. The most common use case is an existing
// subnet that grew past its original assumptions and ran out of addresses,
// so the sysadmin needs to add another subnet on top of existing one.
{
  "Dhcp4": {
    "authoritative": false,
    // Global bootfile name to be set in the 'file' field.
    "boot-file-name": "/dev/null",
    "client-classes": [
      {
        "name": "ubnt",
        "test": "substring(option[60].hex,0,4) == 'ubnt'",
        "option-def": [
          {
            "name": "vendor-encapsulated-options",
            "type": "empty",
            "encapsulate": "ubnt",
            "code": 43
          }
        ],
        "option-data": [
          {
            "name": "unifi-address",
            "space": "ubnt",
            "data": "172.16.0.10"
          },
          {
            "name": "vendor-encapsulated-options"
          }
        ]
      },
      {
        "name": "vmhost-class1",
        "next-server": "172.16.100.31",
        "option-data": []
      }
    ],
    "control-socket": {
      // Location of the unix domain socket file the DHCPv4 server uses
      // to receive control commands from the Kea Control Agent or the
      // local server administrator.
      "socket-name": "/tmp/kea4-ctrl-socket",
      // Control socket type used by the Kea DHCPv4 server. The 'unix'
      // socket is currently the only supported type.
      "socket-type": "unix"
    },
    // Specifies a prefix to be prepended to the generated Client FQDN.
    // It may be specified at the global, shared-network and subnet levels.
    "ddns-generated-prefix": "net",
    // Boolean flag indicating that server should ignore DHCP client
    // wishes to update DNS on its own. With that flag set to true
    // the server will send DNS updates for both forward and
    // reverse DNS data. The default value is false, which indicates
    // that the server will delegate DNS update to the client when
    // requested. It may be specified at the global, shared-network
    // and subnet levels.
    "ddns-override-client-update": false,
    // Boolean flag indicating that the server should override DHCP
    // client's wish to not update the DNS. With this parameter
    // set to true the server will send DNS update even when
    // the client requested no update.  It may be specified at the
    // global, shared-network and subnet levels.
    "ddns-override-no-update": false,
    // Suffix appended to the partial name sent to the DNS. The
    // default value is an empty string which indicates that no
    // suffix is appended.  It may be specified at the global,
    // shared-network and subnet levels.
    "ddns-qualifying-suffix": "",
    // Enumeration specifying whether the server should honor
    // hostname or Client FQDN sent by the client or replace
    // this name. The acceptable values are: "never" (use the
    // name the client sent), "always" (replace the name the
    // client sent), "when-present" (replace the name the client
    // sent, but do not generate one when the client didn't sent
    // the name), "when-not-present" (generate the name when
    // client didn't send one, otherwise leave the name the
    // client sent). The default value is "never".  It may be
    // specified at the global, shared-network and subnet levels.
    "ddns-replace-client-name": "never",
    // Boolean flag which enables or disables the DDNS updating. It
    // defaults to true.  It may be specified at the global, shared-
    // network and subnet levels. It works in conjunction with
    // dhcp-ddns:enable-updates which must be true to enable connectivity
    // to kea-dhcp-ddns.
    "ddns-send-updates": true,
    // Boolean flag, which when true instructs the server to always
    // update DNS when leases are renewed, even if the DNS information
    // has not changed.  The server's default behavior (i.e. flag is false)
    // is to only update DNS if the DNS information has changed.  It
    // may be specified at the global, shared-network and subnet levels.
    "ddns-update-on-renew": true,
    // Boolean flag, which is passed to kea-dhcp-ddns with each DDNS
    // update request to indicate whether or not DNS update conflict
    // resolution as described in RFC 4703 should be employed for the
    // given update request.  The default value for this flag is true.
    // It may be specified at the global, shared-network and subnet levels.
    "ddns-use-conflict-resolution": true,
    // Time in seconds specifying how long a declined lease should be
    // excluded from DHCP assignments. The default value is 24 hours.
    "decline-probation-period": 86400,
    // Name Change Requests forwarding configuration for Kea DHCPv4 server.
    // NCRs are sent to Kea D2 module to update DNS upon allocation of the
    // DHCP leases.
    "dhcp-ddns": {
      // Boolean flag indicating if Kea DHCPv4 server should connect to
      // kea-dhcp-ddns.  This must be true for NCRs to be created and
      // sent to kea-dhcp-ddns. By default NCRs are not generated.
      "enable-updates": true,
      // Specifies maximum number of NCRs to queue waiting to be sent
      // to Kea D2 server.
      "max-queue-size": 1024,
      // Packet format to use when sending NCRs to Kea D2 server.
      // Currently, only JSON format is supported.
      "ncr-format": "JSON",
      // Socket protocol to use when sending NCRs to D2. Currently,
      // only UDP is supported.
      "ncr-protocol": "UDP",
      // IP address that Kea DHCPv4 server should use to send
      // NCRs to D2. Default value of zero indicates that Kea
      // should pick suitable address.
      "sender-ip": "0.0.0.0",
      // Port number that Kea DHCPv4 server should use to send
      // NCRs to D2. Default value of zero indicates that Kea
      // should pick suitable port.
      "sender-port": 0,
      // IP address on which D2 listens for NCRs.
      "server-ip": "127.0.0.1",
      // Port number on which D2 listens for NCRs.
      "server-port": 53001
    },
    // Specifies the first of the two consecutive ports of the UDP
    // sockets used for communication between DHCPv6 and DHCPv4
    // servers. See RFC 7341.
    "dhcp4o6-port": 6767,
    // Boolean flag indicating whether or not the Kea DHCPv4 server
    // should send back Client Identifier option in its responses.
    // The default value is true which indicates that the option
    // must be sent back if the client included it. The false
    // value instructs the server to not send this option for
    // backward compatibility with older DHCP specifications which
    // stated that Client Identifier must not be sent back.
    "echo-client-id": true,
    // Collection of Kea DHCPv4 server parameters configuring how
    // the server should process expired DHCP leases.
    "expired-leases-processing": {
      // Specifies the number of seconds since last removal of
      // the expired leases when next removal should occur.
      "flush-reclaimed-timer-wait-time": 25,
      // Specifies the time period in seconds to keep expired
      // leases in the lease database (lease affinity).
      "hold-reclaimed-time": 3600,
      // Specifies the maximum number of expired leases that can be
      // processed in a single attempt to clean up the lease
      // database from the expired leases. If there are more
      // expired leases, they will be processed during the next
      // cleanup attempt.
      "max-reclaim-leases": 100,
      // Specifies the maximum time in milliseconds that the single
      // attempt to cleanup the lease database from the expired
      // leases may take.
      "max-reclaim-time": 250,
      // Specifies the time period in seconds since last attempt
      // to process expired leases to initiate the next attempt.
      "reclaim-timer-wait-time": 10,
      // Specifies the maximum number of expired leases processing
      // cycles which didn't result in full cleanup of the lease
      // database from the expired leases, after which a
      // warning message is issued.
      "unwarned-reclaim-cycles": 5
    },
    "hooks-libraries": [
      {
        "library": "/usr/lib/kea/hooks/libdhcp_lease_cmds.so",
        "parameters": {}
      },
      {
        "library": "/usr/lib/kea/hooks/libdhcp_stat_cmds.so",
        "parameters": {}
      }
    ],
    // List of access credentials to external sources of IPv4 reservations,
    "hosts-databases": [],
    // List of host reservation identifier types to be used by the
    // Kea DHCPv4 server to fetch static reservations for the
    // DHCP clients. All identifiers are used by default, which
    // means that the server will issue multiple queries to the
    // database to find if there is a reservation for the particular
    // client. If the particular deployment uses only subset, e.g.
    // one, identifier type, this identifier should be only listed
    // here to prevent unnecessary queries to the database.
    "host-reservation-identifiers": [
      "hw-address",
      "duid",
      "circuit-id",
      "client-id",
      "flex-id"
    ],
    // As with any other configuration, you need to tell Kea the interface
    // names, so it would listen to incoming traffic.
    "interfaces-config": {
      "interfaces": [
        "*"
      ],
      "dhcp-socket-type": "udp",
      "outbound-interface": "use-routing",
      "re-detect": false
    },
    // Boolean parameter which controls DHCP server's behavior with respect
    // to creating host reservations for the same IP address. By default
    // this flag is set to true in which case the server prevents creation
    // of multiple host reservations for the same IP address. When this
    // parameter is set to false, the server allows for creating multiple
    // reservations for the same IP address within a subnet. This setting
    // is useful in deployments in which a given host may be communicating
    // with a DHCP server over multiple interfaces and depending on the
    // chosen interface different MAC address (or other identifier) will
    // be used to identify the host. Note that some host backends do not
    // support the mode in which multiple reservations for the same IP
    // address are used. If these backends are in use and this setting
    // is attempted a configuration error will occur. The MySQL and
    // PostgreSQL backends do support this mode.
    "ip-reservations-unique": true,
    "lease-database": {
      "type": "postgresql",
      "name": "${Database.Database}",
      "host": "${Database.Hostname}",
      "user": "${Database.Username}",
      "password": "${Database.Password}",
      "reconnect-wait-time": 3000, // expressed in ms
      "max-reconnect-tries": 3,
      "on-fail": "stop-retry-exit",
      "connect-timeout": 3
    },
    "option-def": [
      {
        // We define a short name, so the option can be referenced by name.
        // The option has code 2 and resides within vendor space 25167.
        // Its data is a plain string.
        "name": "unifi-address",
        "code": 1,
        "space": "ubnt",
        "type": "ipv4-address"
      }
    ],
    // Global value for the rebind timer, i.e. the time after which the
    // DHCP client enters rebind state if it fails to renew the lease.
    "rebind-timer": 40,
    // Global value for the renew timer, i.e. the timer after which the
    // DHCP client renews the lease.
    "renew-timer": 30,
    // Global value to store extended information (e.g. relay agent
    // information) with each lease.
    "store-extended-info": true,
    // Statistics keep some samples per observation point.
    // There are two default values: maximum count and maximum age.
    // Set the maximum count to zero disables it.
    "statistic-default-sample-count": 0,
    // When the maximum count is 0 the maximum age (in seconds) applies.
    "statistic-default-sample-age": 60,
    // Multi-threading parameters.
    "multi-threading": {
      // By default Kea processes packets on a single thread (default
      // 'false' value for this option). To enable multi-threading, this
      // option can be set ('true' value).
      "enable-multi-threading": true,
      // When multi-threading is enabled, Kea will process packets on a
      // number of multiple threads configurable through this option. The
      // value must be a positive integer (0 means auto detect).
      "thread-pool-size": 0,
      // When multi-threading is enabled, Kea will read packets from the
      // interface and append a working item to the thread pool. This
      // option configures the maximum number of items that can be queued.
      // The value must be a positive integer (0 means unlimited).
      "packet-queue-size": 0
    },
    // Governs how the Kea DHCPv4 server should deal with the invalid
    // data received from the client.
    "sanity-checks": {
      // Specifies how the Kea DHCPv4 server should behave when invalid
      // data is read for a lease from the lease file. The following
      // values are supported "none" (don't attempt to correct the
      // lease information), "warn" (print a warning for subnet-id
      // related inconsistencies), "fix" (correct the subnet id by
      // trying to find the suitable subnet), "fix-del" (similar
      // to "fix" but delete the lease if no suitable subnet found),
      // "del" (delete the lease if the lease has invalid subnet
      // identifier value).
      "lease-checks": "warn"
    },
    // The shared networks definition starts here. shared-networks can
    // contain a list of shared networks. There are many parameters
    // that can be specified here, so this example may be overwhelming
    // at first, but the only mandatory parameter for each shared
    // network is name. It must be unique. Typically, each shared
    // network also needs to have at least two subnets to be functional,
    // but if you really want to, you can define a degraded shared
    // network that has 1 or even 0 subnets. This may come in handy
    // when migrating between regular subnets and shared networks
    // or when debugging a problem. It is not recommended to use
    // 1 subnet per shared network, as there is extra processing
    // overhead for shared networks.
    "shared-networks": [
      {
        // Shared network level authoritative flag.
        "authoritative": false,
        // Name of the shared network. It may be an arbitrary string
        // and it must be unique among all shared networks.
        "name": "pi1home1",
        // You may specify interface name if the shared network is
        // reachable directly from the server.
        // You can specify many parameters that are allowed in subnet scope
        // here. It's useful to put them here if they apply to all subnets
        // in this shared network. It's likely that the most common
        // parameter here will be option values defined with option-data.
        "match-client-id": false,
        "option-data": [],
        "rebind-timer": 10800,
        // If all the traffic coming from that shared network is reachable
        // via relay and that relay always use the same IP address, you
        // can specify that relay address here. Since this example shows
        // a shared network reachable directly, we put 0.0.0.0 here.
        // It would be better to skip the relay scope altogether, but
        // it was left here for demonstration purposes.
        "relay": {
          "ip-address": "172.16.100.25"
        },
        // Timer values can be overridden here.
        "renew-timer": 1800,
        // "reservation-mode": "all",
        // It is replaced by the "reservations-global",
        // "reservations-in-subnet" and "reservations-out-of-pool"
        // parameters.
        // Specify if server should lookup global reservations.
        // "reservations-global": false,
        // // Specify if server should lookup in-subnet reservations.
        // "reservations-in-subnet": true,
        // // Specify if server can assume that all reserved addresses
        // // are out-of-pool.
        // // Ignored when reservations-in-subnet is false.
        // "reservations-out-of-pool": false,
        // "reservation-mode": "all",
        // It is replaced by the "reservations-global",
        // "reservations-in-subnet" and "reservations-out-of-pool"
        // parameters.
        "store-extended-info": true,
        "subnet4": [
          {
            "id": 241,
            // Subnet level value. See description at the global level.
            "ddns-generated-prefix": "myhost",
            // Subnet level value. See description at the global level.
            "ddns-override-client-update": false,
            // Subnet level value. See description at the global level.
            "ddns-override-no-update": false,
            // Subnet level value. See description at the global level.
            "ddns-qualifying-suffix": "",
            // Subnet level value. See description at the global level.
            "ddns-replace-client-name": "never",
            // Subnet level value. See description at the global level.
            "ddns-send-updates": true,
            // Subnet level value. See description at the global level.
            "ddns-update-on-renew": true,
            // Subnet level value. See description at the global level.
            "ddns-use-conflict-resolution": true,
            "match-client-id": false,
            "next-server": "0.0.0.0",
            "server-hostname": "dhcp.service.kjdev",
            "option-data": [
              {
                "name": "domain-name-servers",
                "data": "172.31.241.1"
              },
              {
                "name": "routers",
                "data": "172.31.241.1"
              },
              {
                "name": "domain-name",
                "data": "spine0.home1.kristianjones.dev"
              },
              {
                "name": "ntp-servers",
                "data": "162.159.200.123,162.159.200.1"
              },
              {
                "name": "tftp-server-name",
                "data": "tftp.service.kjdev"
              },
              {
                "name": "pcode",
                "data": "CST6CDT,M3.2.0/2:00:00,M11.1.0/2:00:00"
              },
              {
                "name": "tcode",
                "data": "America/Winnipeg"
              }
            ],
            "pools": [],
            "rebind-timer": 10800,
            "reservations": [
              // eth5.wan-sw1.home1.kristianjones.dev
              {
                "hw-address": "2c:c8:1b:54:61:82",
                "ip-address": "172.31.241.1"
              },
              // eth1.pi1.home1.kristianjones.dev
              {
                "hw-address": "dc:a6:32:2e:bd:79",
                "ip-address": "172.31.241.2"
              }
            ],
            "renew-timer": 1800,
            "subnet": "172.31.241.0/30",
            "valid-lifetime": 3600
          }
        ],
        "valid-lifetime": 3600
      },
      {
        // Shared network level authoritative flag.
        "authoritative": false,
        // Name of the shared network. It may be an arbitrary string
        // and it must be unique among all shared networks.
        "name": "spineoffice",
        // You may specify interface name if the shared network is
        // reachable directly from the server.
        // You can specify many parameters that are allowed in subnet scope
        // here. It's useful to put them here if they apply to all subnets
        // in this shared network. It's likely that the most common
        // parameter here will be option values defined with option-data.
        "match-client-id": false,
        "option-data": [],
        "rebind-timer": 10800,
        // If all the traffic coming from that shared network is reachable
        // via relay and that relay always use the same IP address, you
        // can specify that relay address here. Since this example shows
        // a shared network reachable directly, we put 0.0.0.0 here.
        // It would be better to skip the relay scope altogether, but
        // it was left here for demonstration purposes.
        "relay": {
          "ip-address": "172.16.100.25"
        },
        // Timer values can be overridden here.
        "renew-timer": 1800,
        // "reservation-mode": "all",
        // It is replaced by the "reservations-global",
        // "reservations-in-subnet" and "reservations-out-of-pool"
        // parameters.
        // Specify if server should lookup global reservations.
        // "reservations-global": false,
        // // Specify if server should lookup in-subnet reservations.
        // "reservations-in-subnet": true,
        // // Specify if server can assume that all reserved addresses
        // // are out-of-pool.
        // // Ignored when reservations-in-subnet is false.
        // "reservations-out-of-pool": false,
        // "reservation-mode": "all",
        // It is replaced by the "reservations-global",
        // "reservations-in-subnet" and "reservations-out-of-pool"
        // parameters.
        "store-extended-info": true,
        "subnet4": [
          {
            "id": 1,
            "match-client-id": false,
            "next-server": "0.0.0.0",
            "server-hostname": "dhcp.service.kjdev",
            "option-data": [
              {
                "name": "domain-name-servers",
                "data": "172.16.100.1"
              },
              {
                "name": "routers",
                "data": "172.16.100.1"
              },
              {
                "name": "log-servers",
                "data": "172.16.0.10,172.16.0.11,172.16.0.12,172.16.0.13"
              },
              {
                "name": "domain-name",
                "data": "spine0.home1.kristianjones.dev"
              },
              {
                "name": "ntp-servers",
                "data": "162.159.200.123,162.159.200.1"
              },
              {
                "name": "tftp-server-name",
                "data": "tftp.service.kjdev"
              },
              {
                "name": "pcode",
                "data": "CST6CDT,M3.2.0/2:00:00,M11.1.0/2:00:00"
              },
              {
                "name": "tcode",
                "data": "America/Winnipeg"
              }
            ],
            "pools": [
              {
                "pool": "172.16.100.100 - 172.16.100.240"
              }
            ],
            "rebind-timer": 10800,
            "reservations": [
              {
                "hw-address": "dc:a6:32:2e:bd:79",
                "ip-address": "172.16.100.31"
              },
              // Randoms
              {
                "hw-address": "3c:8d:20:3d:a1:9b",
                "ip-address": "172.16.100.41"
              },
              {
                "hw-address": "50:02:91:b2:1a:39",
                "ip-address": "172.16.100.42"
              },
              {
                "hw-address": "c4:4f:33:cf:56:62",
                "ip-address": "172.16.100.43"
              },
              {
                "hw-address": "5c:52:1e:66:42:47",
                "ip-address": "172.16.100.44"
              },
              {
                "hw-address": "88:54:1f:13:ef:be",
                "ip-address": "172.16.100.45"
              },
              {
                "hw-address": "d8:8c:79:26:2b:24",
                "ip-address": "172.16.100.46"
              },
              {
                "hw-address": "44:c6:5d:b0:5d:c6",
                "ip-address": "172.16.100.47"
              },
              {
                "hw-address": "2c:26:17:d7:cb:b5",
                "ip-address": "172.16.100.48"
              },
              // Important
              {
                "hw-address": "3a:05:90:29:77:5d",
                "ip-address": "172.16.100.251"
              },
              // Amazon Device Fire TV?
              {
                "hw-address": "a0:d0:dc:5e:1a:8a",
                "ip-address": "172.16.100.91"
              },
              // TBD?
              {
                "hw-address": "d0:03:df:89:da:c2",
                "ip-address": "172.16.100.95"
              },
              {
                "hw-address": "00:04:4b:f0:c7:ec",
                "ip-address": "172.16.100.92"
              },
              // Shield?
              {
                "hw-address": "00:04:4b:f1:b2:4c",
                "ip-address": "172.16.100.93"
              },
              // Bedroom Mini
              {
                "hw-address": "d4:f5:47:93:4f:13",
                "ip-address": "172.16.100.81"
              },
              // kitchen1-display.office1.kristianjones.dev
              {
                "hw-address": "1c:f2:9a:2e:b2:f9",
                "ip-address": "172.16.100.82"
              },
              {
                "hw-address": "f8:0f:f9:60:05:15",
                "ip-address": "172.16.100.83"
              },
              {
                "hw-address": "d8:6c:63:54:b1:0c",
                "ip-address": "172.16.100.84"
              },
              {
                "hw-address": "00:e0:4c:79:61:d1",
                "ip-address": "172.16.100.85"
              },
              {
                "hw-address": "44:07:0b:57:2d:76",
                "ip-address": "172.16.100.86"
              },
              {
                "hw-address": "2a:b1:76:70:33:d3",
                "ip-address": "172.16.100.87"
              },
              // kjdev-workpc1.kristianjones.dev
              {
                "hw-address": "cc:48:3a:b6:e5:6b",
                "ip-address": "172.16.100.252"
              },
              // printer1.office1.kristianjones.dev
              {
                "hw-address": "e4:e7:49:b6:cb:50",
                "ip-address": "172.16.100.253"
              },
              {
                "hw-address": "b8:ae:ed:79:5e:1d",
                "ip-address": "172.16.100.250",
                "client-classes": [
                  "vmhost-class1"
                ]
              }
            ],
            "renew-timer": 1800,
            "subnet": "172.16.100.0/24",
            "valid-lifetime": 3600
          }
        ],
        "valid-lifetime": 3600
      }
    ], // end of shared-networks
    "server-hostname": "core0.site1.kristianjones.dev",
    // List of IPv4 subnets which don't belong to any shared network.
    "subnet4": [],
    // Global valid (default) lifetime value.
    "valid-lifetime": 1800,
    // Global min valid lifetime value.
    "min-valid-lifetime": 900,
    // Global max valid lifetime value.
    "max-valid-lifetime": 43200,
    // Reservations (examples are in other files).
    "reservations": [],
    // Server tag.
    "server-tag": "{{ env "NOMAD_ALLOC_NAME" }}",
    // DHCP queue control parameters.
    "dhcp-queue-control": {
      // Enable queue is mandatory.
      "enable-queue": true,
      // Queue type was mandatory.
      "queue-type": "kea-ring4",
      // Capacity is optional.
      "capacity": 64
    },
    // The following configures logging. It assumes that messages with at
    // least informational level (info, warn, error and fatal) should be
    // logged to stdout.
    "loggers": [
      {
        "name": "kea-dhcp4",
        "output_options": [
          {
            "output": "stdout"
          }
        ],
        "severity": "warn"
      }
    ],
    // Look at advanced example for the use of user-contexts.
    "user-context": {}
  } // end of Dhcp4
}