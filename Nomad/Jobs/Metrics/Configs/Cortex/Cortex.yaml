# Comma-separated list of Cortex modules to load. The alias 'all' can be used in
# the list to load a number of core modules and will enable single-binary mode.
# Use '-modules' command line flag to get a list of available modules, and to
# see which modules are included in 'all'.
# CLI flag: -target
target: {{ env "NOMAD_META_TARGET" }}

#
# API
#
api:
  # Use GZIP compression for API responses. Some endpoints serve large YAML or
  # JSON blobs which can benefit from compression.
  # CLI flag: -api.response-compression-enabled
  response_compression_enabled: true

  # HTTP URL path under which the Alertmanager ui and api will be served.
  # CLI flag: -http.alertmanager-http-prefix
  alertmanager_http_prefix: /alertmanager

  # HTTP URL path under which the Prometheus api will be served.
  # CLI flag: -http.prometheus-http-prefix
  prometheus_http_prefix: /prometheus

#
# TODO: Figure out SSO & M2M
#
auth_enabled: false

#
# Docs: https://cortexmetrics.io/docs/configuration/configuration-file/#server_config
#
server:
  #
  # HTTP Server
  #
  http_listen_address: 0.0.0.0
  http_listen_port: 8080

  #
  # GRPC Server
  #
  grpc_listen_address: 0.0.0.0
  grpc_listen_port: 8085

  #
  # Logs
  #
  # Output log messages in the given format. Valid formats: [logfmt, json]
  # CLI flag: -log.format
  log_format: json

  # Only log messages with the given severity or above. Valid levels: [debug, info, warn, error]
  # CLI flag: -log.level
  log_level: debug

  # Optionally log the source IPs.
  # CLI flag: -server.log-source-ips-enabled
  log_source_ips_enabled: false

  # Header field storing the source IPs. Only used if
  # server.log-source-ips-enabled is true. If not set the default Forwarded,
  # X-Real-IP and X-Forwarded-For headers are used
  # CLI flag: -server.log-source-ips-header
  log_source_ips_header: ''

  # Regex for matching the source IPs. Only used if server.log-source-ips-enabled
  # is true. If not set the default Forwarded, X-Real-IP and X-Forwarded-For
  # headers are used
  # CLI flag: -server.log-source-ips-regex
  log_source_ips_regex: ''

  #
  # GRPC
  #
  grpc_server_max_concurrent_streams: 0

#
# Docs: https://cortexmetrics.io/docs/configuration/configuration-file/#distributor_config
#
distributor:
  pool:
    # How frequently to clean up clients for ingesters that have gone away.
    # CLI flag: -distributor.client-cleanup-period
    client_cleanup_period: 15s

    # Run a health check on each ingester client during periodic cleanup.
    # CLI flag: -distributor.health-check-ingesters
    health_check_ingesters: true

  #
  # TODO: What is this?
  # Docs: https://cortexmetrics.io/docs/configuration/configuration-file/#distributor_config
  #
  # ha_tracker:
  #   enable_ha_tracker: true
  #   kvstore:
  #     store: consul
  #     consul:
  #       host: tasks.ConsulCore:8500
  #   replication_factor: 1

  # Distribute samples based on all labels, as opposed to solely by user and
  # metric name.
  shard_by_all_labels: false

  ring:
    instance_id: {{ env "NOMAD_ALLOC_NAME" }}
    instance_addr: {{ env "NOMAD_ALLOC_INDEX" }}.http.{{ env "NOMAD_META_TARGET" }}.cortex.service.dc1.kjdev
    kvstore:
      store: multi
      prefix: ${Consul.Prefix}/collectors/

      #
      # 
      #
      multi:
        #
        # Primary backend storage used by multi-client.
        #
        primary: memberlist

        # Secondary backend storage used by multi-client.
        secondary: consul


      #
      # Docs: https://cortexmetrics.io/docs/configuration/configuration-file/#consul_config
      #
      consul:
        host: {{ env "NOMAD_IP_http" }}:${Consul.Port}
        acl_token: ${Consul.Token}


#
# Docs: https://cortexmetrics.io/docs/configuration/configuration-file/#querier_config
#
querier:
  query_store_for_labels_enabled: true

  # Enable the @ modifier in PromQL.
  at_modifier_enabled: true

  # Used when the blocks sharding is disabled.
  store_gateway_addresses: grpc.store-gateway.cortex.service.dc1.kjdev:8085


#
# Docs: https://cortexmetrics.io/docs/configuration/configuration-file/#ingester_client_config
#
ingester_client:
  grpc_client_config:
    grpc_compression: gzip

#
# Docs: https://cortexmetrics.io/docs/configuration/configuration-file/#ingester_config
#
ingester:
  lifecycler:
    # We want to start immediately.
    join_after: 10s

    # -- To avoid generating same tokens by multiple ingesters, they can "observe" the ring for a while,
    # after putting their own tokens into it. This is only useful when using gossip, since multiple
    # ingesters joining at the same time can have conflicting tokens if they don't see each other yet.
    observe_period: 10s

    # -- Duration to sleep for before exiting, to ensure metrics are scraped.
    final_sleep: 30s
    
    num_tokens: 512

    ring:
      kvstore:
        store: multi
        prefix: ${Consul.Prefix}/collectors/
        
        #
        # 
        #
        multi:
          #
          # Primary backend storage used by multi-client.
          # 
          primary: memberlist

          # Secondary backend storage used by multi-client.
          secondary: consul

          # Mirror writes to secondary store.
          mirror_enabled: true

        #
        # Docs: https://cortexmetrics.io/docs/configuration/configuration-file/#consul_config
        #
        consul:
          host: {{ env "NOMAD_IP_http" }}:${Consul.Port}
          acl_token: ${Consul.Token}

      replication_factor: 2


#
# Docs: https://cortexmetrics.io/docs/configuration/configuration-file/#flusher_config
#
# TODO: Learn about this
#
#flusher:

#
# Docs: https://cortexmetrics.io/docs/configuration/configuration-file/#storage_config
#
storage:
  engine: blocks

#
# Docs: https://cortexmetrics.io/docs/configuration/configuration-file/#limits_config
#
limits:
  # Limit max query time range to 31d
  max_query_length: 744h

  # Maximum number of label names per series.
  max_label_names_per_series: 64

  enforce_metric_name: true

  reject_old_samples: false
  
  reject_old_samples_max_age: 4w

#
# Docs: https://cortexmetrics.io/docs/configuration/configuration-file/#frontend_worker_config
#
frontend_worker:
  #frontend_address: "grpc.query-frontend.cortex.service.kjdev:{{ env "NOMAD_PORT_queryfrontend_grpc" }}"
  match_max_concurrent: true

  # By setting scheduler_address, querier worker would use scheduler instead of frontend.
  scheduler_address: grpc.query-scheduler.cortex.service.dc1.kjdev:8085
  
  # Querier ID, sent to frontend service to identify requests from the same
  # querier. Defaults to hostname.
  id: {{ env "NOMAD_ALLOC_NAME" }}

  grpc_client_config:
    grpc_compression: 'gzip'
  


#
# Docs: https://cortexmetrics.io/docs/configuration/configuration-file/#query_frontend_config
#
frontend:
  query_stats_enabled: true
  scheduler_address: grpc.query-scheduler.cortex.service.dc1.kjdev:8085

  grpc_client_config:
    grpc_compression: 'gzip'
    


#
# Docs: https://cortexmetrics.io/docs/configuration/configuration-file/#query_range_config
#
query_range:
  split_queries_by_interval: 24h

  align_queries_with_step: true

  cache_results: true
  results_cache:
    cache:
      memcached:
        expiration: 1h
      memcached_client:
        timeout: 1s

#
# Docs: https://cortexmetrics.io/docs/configuration/configuration-file/#table_manager_config
#
# TODO: Learn about this
#
#table_manager:


#
# Docs: https://cortexmetrics.io/docs/configuration/configuration-file/#blocks_storage_config
#
blocks_storage:
  backend: s3

  s3:
    endpoint: ${S3.Connection.Endpoint}
    bucket_name: ${S3.Bucket}
    access_key_id: ${S3.Credentials.AccessKey}
    secret_access_key: ${S3.Credentials.SecretKey}
    insecure: true

  tsdb:
    ship_interval: 1m
    max_exemplars: 5000
    wal_compression_enabled: true

  bucket_store:
    consistency_delay: 5s

    index_cache:
      backend: memcached
      memcached:
        addresses: dns+memcached.cortex.service.dc1.kjdev:11211

    chunks_cache:
      backend: memcached
      memcached:
        addresses: dns+memcached.cortex.service.dc1.kjdev:11211

    metadata_cache:
      backend: memcached
      memcached:
        addresses: dns+memcached.cortex.service.dc1.kjdev:11211

#
# Docs: https://cortexmetrics.io/docs/configuration/configuration-file/#compactor_config
#
compactor:
  compaction_interval: 30m
  consistency_delay: 1m
  sharding_enabled: true
  cleanup_interval: 10m
  tenant_cleanup_delay: 10m
  sharding_ring:
    kvstore:
      store: multi
      prefix: ${Consul.Prefix}/collectors/

      #
      # 
      #
      multi:
        #
        # Primary backend storage used by multi-client.
        # 
        primary: memberlist

        # Secondary backend storage used by multi-client.
        secondary: consul
      
      #
      # Docs: https://cortexmetrics.io/docs/configuration/configuration-file/#consul_config
      #
      consul:
        host: {{ env "NOMAD_IP_http" }}:${Consul.Port}
        acl_token: ${Consul.Token}


#
# Docs: https://cortexmetrics.io/docs/configuration/configuration-file/#store_gateway_config
#
store_gateway:
  sharding_enabled: true

  sharding_strategy: 'shuffle-sharding'
  sharding_ring:
    replication_factor: 2

    #
    # Address
    #
    instance_id: {{ env "NOMAD_ALLOC_NAME" }}
    instance_addr: {{ env "NOMAD_ALLOC_INDEX" }}.http.{{ env "NOMAD_META_TARGET" }}.cortex.service.dc1.kjdev
    kvstore:
      store: multi
      prefix: ${Consul.Prefix}/collectors/

      #
      # 
      #
      multi:
        #
        # Primary backend storage used by multi-client.
        # 
        primary: memberlist

        # Secondary backend storage used by multi-client.
        secondary: consul

        mirror_enabled: true

      #
      # Docs: https://cortexmetrics.io/docs/configuration/configuration-file/#consul_config
      #
      consul:
        host: {{ env "NOMAD_IP_http" }}:${Consul.Port}
        acl_token: ${Consul.Token}

#
# Docs: https://cortexmetrics.io/docs/configuration/configuration-file/#purger_config
#
# TODO: Learn about this
#
#purger:

#
# TODO: Learn about this
#
tenant_federation:
  # If enabled on all Cortex services, queries can be federated across multiple
  # tenants. The tenant IDs involved need to be specified separated by a `|`
  # character in the `X-Scope-OrgID` header (experimental).
  # CLI flag: -tenant-federation.enabled
  enabled: false

#
# Docs: https://cortexmetrics.io/docs/configuration/configuration-file/#ruler_config
#
ruler:
  enable_api: true
  enable_sharding: true

  #  
  # Report the wall time for ruler queries to complete as a per user metric and as
  # an info level log message.
  #
  query_stats_enabled: false

  external_url: http://http.ruler.cortex.service.kjdev:8080

  ruler_client:
    grpc_compression: 'gzip'

  ring:
    heartbeat_period: 5s
    heartbeat_timeout: 15s
    kvstore:
      store: multi
      prefix: ${Consul.Prefix}/rulers/

      #
      # 
      #
      multi:
        #
        # Primary backend storage used by multi-client.
        # 
        primary: memberlist

        # Secondary backend storage used by multi-client.
        secondary: consul

      #
      # Docs: https://cortexmetrics.io/docs/configuration/configuration-file/#consul_config
      #
      consul:
        host: {{ env "NOMAD_IP_http" }}:${Consul.Port}
        acl_token: ${Consul.Token}

  alertmanager_url: http://http.alertmanager.cortex.service.dc1.kjdev:8080/alertmanager
  enable_alertmanager_v2: true
  enable_alertmanager_discovery: false

#
# Docs: https://cortexmetrics.io/docs/configuration/configuration-file/#ruler_storage_config
#
ruler_storage:
  backend: s3
  s3:
    bucket_name: ${S3.Bucket}
    endpoint: ${S3.Connection.Endpoint}
    access_key_id: ${S3.Credentials.AccessKey}
    secret_access_key: ${S3.Credentials.SecretKey}
    insecure: true

#
# Docs: https://cortexmetrics.io/docs/configuration/configuration-file/#configs_config
#
# TODO: Learn about this
#
configs:
  database:
    # URI where the database can be found (for dev you can use memory://)
    uri: postgres://${Database.Username}@${Database.Hostname}:${Database.Port}/${Database.Database}?sslmode=disable

    # Path where the database migration files can be found
    migrations_dir: /migrations

    # File containing password (username goes in URI)
    password_file: /secrets/DB_PASS

#
# Docs: https://cortexmetrics.io/docs/configuration/configuration-file/#alertmanager_config
#
alertmanager:
  # Enable the experimental alertmanager config api.
  # CLI flag: -experimental.alertmanager.enable-api
  enable_api: true

  external_url: http://http.alertmanager.cortex.service.dc1.kjdev:8080/alertmanager

  # Shard tenants across multiple alertmanager instances.
  # CLI flag: -alertmanager.sharding-enabled
  sharding_enabled: true
  sharding_ring:
    replication_factor: 2
    heartbeat_period: 5s
    heartbeat_timeout: 15s
    kvstore:
      store: multi
      prefix: ${Consul.Prefix}/alertmanagers/

      #
      # 
      #
      multi:
        #
        # Primary backend storage used by multi-client.
        # 
        primary: memberlist

        # Secondary backend storage used by multi-client.
        secondary: consul

      #
      # Docs: https://cortexmetrics.io/docs/configuration/configuration-file/#consul_config
      #
      consul:
        host: {{ env "NOMAD_IP_http" }}:${Consul.Port}
        acl_token: ${Consul.Token}
  fallback_config_file: /local/AlertManager.yaml
  cluster:
    listen_address: 0.0.0.0:9094

    advertise_address: {{ env "NOMAD_ALLOC_INDEX" }}.ha.alertmanager.cortex.service.dc1.kjdev

    peers: 0.ha.alertmanager.cortex.service.dc1.kjdev:9094,1.ha.alertmanager.cortex.service.dc1.kjdev:9094,2.ha.alertmanager.cortex.service.dc1.kjdev:9094

#
# Docs: https://cortexmetrics.io/docs/configuration/configuration-file/#alertmanager_storage_config
#
alertmanager_storage:
  backend: s3
  s3:
    bucket_name: ${AlertManagerBucket.Bucket}
    region: us-east-1
    endpoint: ${AlertManagerBucket.Connection.Endpoint}
    access_key_id: ${AlertManagerBucket.Credentials.AccessKey}
    secret_access_key: ${AlertManagerBucket.Credentials.SecretKey}
    insecure: true
#
# Docs: https://cortexmetrics.io/docs/configuration/configuration-file/#supported-contents-and-default-values-of-the-config-file
#
# runtime_config:
#   file: ./config/runtime.yaml

#
# Docs: https://cortexmetrics.io/docs/configuration/configuration-file/#memberlist_config
#
# TODO: Determine if this along with a for each with Terraform for hostnames based on repliacs is worth it
#
memberlist:
  bind_addr:
    - 0.0.0.0
  node_name: {{ env "NOMAD_ALLOC_NAME" }}
  bind_port: 8090
  randomize_node_name: false
  
  compression_enabled: true
  abort_if_cluster_join_fails: true

  advertise_port: 8090
  join_members:
    # Distributor
    - dnssrv+gossip.distributor.cortex.service.dc1.kjdev

    # Querier
    - dnssrv+gossip.querier.cortex.service.dc1.kjdev

    # Ingester
    - dnssrv+gossip.ingester.cortex.service.dc1.kjdev

    # Query Frontend
    - dnssrv+gossip.query-frontend.cortex.service.dc1.kjdev

    # Store Gateway
    - dnssrv+gossip.store-gateway.cortex.service.dc1.kjdev

    # Compactor
    - dnssrv+gossip.compactor.cortex.service.dc1.kjdev

    # Ruler
    - dnssrv+gossip.ruler.cortex.service.dc1.kjdev

    # Configs
    - dnssrv+gossip.configs.cortex.service.dc1.kjdev

    # Alert Manager
    - dnssrv+gossip.alertmanager.cortex.service.dc1.kjdev

    # Query Scheduler

    - dnssrv+gossip.query-scheduler.cortex.service.dc1.kjdev



#
# TODO: Learn about this, and determine if useful/necessary
#
query_scheduler:
  grpc_client_config:
    grpc_compression: gzip