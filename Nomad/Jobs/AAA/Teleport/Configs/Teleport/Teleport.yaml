teleport:
  nodename: Teleport{{ env "NOMAD_META_Service" }}{{ env "NOMAD_ALLOC_INDEX" }}
  data_dir: /var/lib/teleport

  log:
    output: stderr
    severity: INFO
  ca_pin: ''

  advertise_ip: https.{{ env "NOMAD_META_Service" }}.teleport.service.dc1.kjdev

  auth_token: ${Secrets.JoinPin}

  auth_servers:
    - 0.https.auth.teleport.service.dc1.kjdev:3025
    - 1.https.auth.teleport.service.dc1.kjdev:3025
    - 2.https.auth.teleport.service.dc1.kjdev:3025

  #
  # Cluster Storage
  #
  storage:
    type: etcd

    # List of etcd peers to connect to:
    peers: ["https://0.etcd.teleport.service.dc1.kjdev:2379", "https://1.etcd.teleport.service.dc1.kjdev:2379", "https://2.etcd.teleport.service.dc1.kjdev:2379"]

    # Required path to TLS client certificate and key files to connect to etcd.
    tls_cert_file: /secrets/AuthServerCert.pem
    tls_key_file: /secrets/AuthServerCert.key

    # Optional file with trusted CA authority
    tls_ca_file: /local/TeleportETCDCA.pem


    # etcd key (location) where teleport will be storing its state under.
    # make sure it ends with a '/'!
    prefix: /teleport/

    # NOT RECOMMENDED: enables insecure etcd mode in which self-signed
    # certificate will be accepted
    insecure: false

    # Optionally sets the limit on the client message size.
    # This is usually used to increase the default which is 2MiB
    # (1.5MiB server's default + gRPC overhead bytes).
    # Make sure this does not exceed the value for the etcd
    # server specified with `--max-request-bytes` (1.5MiB by default).
    # Keep the two values in sync.
    #
    # See https://etcd.io/docs/v3.4.0/dev-guide/limit/ for details
    #
    # This bumps the size to 15MiB as an example:
    etcd_max_client_msg_size_bytes: 15728640


auth_service:
  enabled: '{{ $Service := env "NOMAD_META_Service" }}{{ if eq $Service "Auth" }}yes{{ else }}no{{ end }}'

  listen_addr: 0.0.0.0:3025
  public_addr: {{ env "NOMAD_ALLOC_INDEX" }}.https.auth.teleport.service.dc1.kjdev:3025

  cluster_name: dc1.kristianjones.dev

  proxy_listener_mode: multiplex

  authentication:
    type: github
  
  tokens:
    - 'proxy,node,auth:${Secrets.JoinPin}'

ssh_service:
  enabled: '{{ $Service := env "NOMAD_META_Service" }}{{ if eq $Service "Proxy" }}yes{{ else }}no{{ end }}'
  labels:
    env: example
  commands:
  - name: hostname
    command: [hostname]
    period: 1m0s


proxy_service:
  enabled: '{{ $Service := env "NOMAD_META_Service" }}{{ if eq $Service "Proxy" }}yes{{ else }}no{{ end }}'

  # The HTTPS listen address to serve the Web UI and also to authenticate the
  # command line (CLI) users via password+HOTP
  # Also handles the PostgreSQL proxy if database access is enabled.
  web_listen_addr: 0.0.0.0:3080

  https_keypairs:
    #
    # Proxy Service
    #
    - key_file: /secrets/ProxyServerCert.key
      cert_file: /secrets/ProxyServerCert.pem

    #
    # Auth Server
    #
    - key_file: /secrets/AuthServerCert.key
      cert_file: /secrets/AuthServerCert.pem
