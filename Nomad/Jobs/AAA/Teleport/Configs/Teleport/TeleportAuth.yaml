teleport:
  nodename: localhost
  data_dir: /var/lib/teleport
  log:
    output: stderr
    severity: INFO
  ca_pin: ''

  #
  # Cluster Storage
  #
  storage:
    type: etcd

    # List of etcd peers to connect to:
    peers: ["https://0.etcd.teleport.service.dc1.kjdev:2379", "https://1.etcd.teleport.service.dc1.kjdev:2379", "https://2.etcd.teleport.service.dc1.kjdev:2379"]

    # Required path to TLS client certificate and key files to connect to etcd.
    tls_cert_file: /secrets/AuthServerCert.pem
    tls_key_file: /secrets/AuthServerCert.key

    # Optional file with trusted CA authority
    tls_ca_file: /local/TeleportETCDCA.pem


    # etcd key (location) where teleport will be storing its state under.
    # make sure it ends with a '/'!
    prefix: /teleport/

    # NOT RECOMMENDED: enables insecure etcd mode in which self-signed
    # certificate will be accepted
    insecure: false

    # Optionally sets the limit on the client message size.
    # This is usually used to increase the default which is 2MiB
    # (1.5MiB server's default + gRPC overhead bytes).
    # Make sure this does not exceed the value for the etcd
    # server specified with `--max-request-bytes` (1.5MiB by default).
    # Keep the two values in sync.
    #
    # See https://etcd.io/docs/v3.4.0/dev-guide/limit/ for details
    #
    # This bumps the size to 15MiB as an example:
    etcd_max_client_msg_size_bytes: 15728640


auth_service:
  enabled: 'yes'

  listen_addr: 0.0.0.0:3025
  #public_addr: auth.access.kristianjones.dev:3025

  cluster_name: dc1.kristianjones.dev

  proxy_listener_mode: multiplex

  authentication:
    type: github

ssh_service:
  enabled: 'yes'
  labels:
    env: example
  commands:
  - name: hostname
    command: [hostname]
    period: 1m0s


proxy_service:
  enabled: 'yes'

  # SSH forwarding/proxy address. Command line (CLI) clients always begin their
  # SSH sessions by connecting to this port
  listen_addr: 0.0.0.0:3023

  https_keypairs:
    #
    # Proxy Service
    #
    - key_file: /secrets/ProxyServerCert.key
      cert_file: /secrets/ProxyServerCert.pem

    #
    # Auth Server
    #
    - key_file: /secrets/AuthServerCert.key
      cert_file: /secrets/AuthServerCert.pem

  # ProxyProtocol enables support for HAProxy proxy protocol version 1 when it is turned 'on'.
  # Verify whether the service is in front of a trusted load balancer.
  # The default value is 'on'.
  #proxy_protocol: on


  # Reverse tunnel listening address. An auth server (CA) can establish an
  # outbound (from behind the firewall) connection to this address.
  # This will allow users of the outside CA to connect to behind-the-firewall
  # nodes.
  tunnel_listen_addr: 0.0.0.0:3024

  # The HTTPS listen address to serve the Web UI and also to authenticate the
  # command line (CLI) users via password+HOTP
  # Also handles the PostgreSQL proxy if database access is enabled.
  web_listen_addr: 0.0.0.0:3080